#!/usr/bin/env python
# coding: utf-8

import tkinter as tk
from tkinter import messagebox, scrolledtext, Button, Label, Entry
from wordcloud import WordCloud, STOPWORDS
from rake_nltk import Rake
import matplotlib.pyplot as plt
import nltk
from heapq import nlargest
import string

nltk.download('stopwords')
nltk.download('punkt')

def generate_word_cloud():
    text = text_input.get("1.0",'end-1c')
    WC=WordCloud(stopwords=STOPWORDS, background_color="beige").generate(text)

    plt.figure(figsize=(10,10))
    plt.imshow(WC,interpolation='bilinear')
    plt.axis("on")
    plt.show()

def extract_keywords():
    text = text_input.get("1.0",'end-1c')
    rk = Rake()

    rk.extract_keywords_from_text(text)
    extract_keyword = rk.get_ranked_phrases()
    keywords_output.delete(1.0, tk.END)
    keywords_output.insert(tk.END, "\n".join(extract_keyword))

def summarize_text():
    text = text_input.get("1.0",'end-1c')

    nopuch = [char for char in text if char not in string.punctuation]
    nopuch = "".join(nopuch)

    process_text = [word for word in nopuch.split() if word.lower() not in nltk.corpus.stopwords.words('english')]

    word_freq = {}
    for word in process_text:
        if word not in word_freq:
            word_freq[word] = 1
        else:
            word_freq[word] += 1

    max_freq = max(word_freq.values())

    for word in word_freq.keys():
        word_freq[word] = (word_freq[word] / max_freq)

    sent_list = nltk.sent_tokenize(text)

    sent_score = {}
    for sent in sent_list:
        for word in nltk.word_tokenize(sent.lower()):
            if word in word_freq.keys():
                if sent not in sent_score.keys():
                    sent_score[sent] = word_freq[word]
                else:
                    sent_score[sent] += word_freq[word]

    summary_sent = nlargest(10, sent_score, key=sent_score.get)
    summary = " ".join(summary_sent)
    summary_output.delete(1.0, tk.END)
    summary_output.insert(tk.END, summary)

# Create main window
root = tk.Tk()
root.title("Text Analysis Console")

# Text Input
Label(root, text="Enter Text:").pack()
text_input = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=100, height=10)
text_input.pack()

# Buttons
Button(root, text="Generate Word Cloud", command=generate_word_cloud).pack()
Button(root, text="Extract Keywords", command=extract_keywords).pack()
Button(root, text="Summarize Text", command=summarize_text).pack()

# Output
Label(root, text="Keywords:").pack()
keywords_output = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=100, height=10)
keywords_output.pack()

Label(root, text="Summary:").pack()
summary_output = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=100, height=10)
summary_output.pack()

# Start GUI
root.mainloop()
